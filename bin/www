/**
 * Module dependencies.
 */
"use strict";

const cluster = require("cluster");
const numCPUs = require("os").cpus().length;

if (cluster.isMaster) {
	// this is the master process
	let exitedWorkers = 0;
	let cworker, _i;
	for (
		cworker = _i = 1;
		1 <= numCPUs ? _i <= numCPUs : _i >= numCPUs;
		cworker = 1 <= numCPUs ? ++_i : --_i
	) {
		cluster.fork();
	}
	cluster.on("exit", function(worker, code, signal) {
		if (worker.suicide) {
			exitedWorkers++;
			if (exitedWorkers === numCPUs) {
				console.log("all workers exited successfully!");
				process.exit(0);
			}
			return;
		}
		return cluster.fork();
	});
	process.on("SIGTERM", function() {
		Object.keys(cluster.workers).forEach(function(key) {
			cluster.workers[key].kill();
		});
	});
	// commenting this out for the time being
	return true;
}

const app = require("../server/nurturelabs");
const http = require("http");

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.APP_PORT || "9000");
app.set("port", port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
	let port = parseInt(val, 10);

	if (isNaN(port)) {
		// named pipe
		return val;
	}

	if (port >= 0) {
		// port number
		return port;
	}

	return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
	if (error.syscall !== "listen") {
		throw error;
	}

	let bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

	// handle specific listen errors with friendly messages
	switch (error.code) {
		case "EACCES":
			console.error(bind + " requires elevated privileges");
			process.exit(1);
			break;
		case "EADDRINUSE":
			console.error(bind + " is already in use");
			process.exit(1);
			break;
		default:
			throw error;
	}
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
	let addr = server.address();
	let bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
}
process.on("SIGTERM", function() {
	server.close(function() {
		console.log("exiting " + cluster.worker.id);
		cluster.worker.kill();
	});
});
